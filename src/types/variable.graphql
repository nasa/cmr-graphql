type Variable {
  "Any additional identifiers of a variable."
  additionalIdentifiers: JSON

  "The list of concepts and any data on the relationship between this variable and other permitted concepts"
  associationDetails: JSON

  "The unique concept id assigned to the variable."
  conceptId: String!

  "Specify data type of a variable. These types can be either: uint8, uint16, etc."
  dataType: String

  "The definition of the variable."
  definition: String

  "A variable consists of one or more dimensions. An example of a dimension name is 'XDim'. An example of a dimension size is '1200'. Variables are rarely one dimensional."
  dimensions: JSON

  "The fill value of the variable in the data file. It is generally a value which falls outside the valid range. For example, if the valid range is '0, 360', the fill value may be '-1'. The fill value type is data provider-defined. For example, 'Out of Valid Range'."
  fillValues: JSON

  "This element describes the x and y dimension ranges for this variable. Typically these values are 2 latitude and longitude ranges, but they don't necessarily have to be."
  indexRanges: JSON

  "Describes a store (zarr) where a variable has been separated from its original data files and saved as its own entity."
  instanceInformation: JSON

  "The expanded or long name related to the variable Name."
  longName: String

  "The measurement information of a variable."
  measurementIdentifiers: JSON

  "The name of a variable."
  name: String

  "The native id of a variable."
  nativeId: String

  "The offset is the value which is either added to or subtracted from all values in the stored data field in order to obtain the original values. May be used together with Scale. An example of an offset is '0.49'."
  offset: Float

  "Provider ID of the Variable."
  providerId: String

  "A described URL associated with the a web resource, or interface. e.g., the home page for the variable provider."
  relatedUrls: JSON

  "Date which the Variable was last updated."
  revisionDate: String

  "The revision id of the Variable."
  revisionId: String

  "The sampling information of a variable."
  samplingIdentifiers: JSON

  "The scale is the numerical factor by which all values in the stored data field are multiplied in order to obtain the original values. May be used together with Offset. An example of a scale factor is '0.002'."
  scale: Float

  "Controlled Science Keywords describing the collection. The controlled vocabulary for Science Keywords is maintained in the Keyword Management System (KMS)."
  scienceKeywords: JSON

  "The set information of a variable. The variable is grouped within a set. The set is defined by the name, type, size and index. For example, Name: 'Data_Fields', Type: 'General', Size: '15', Index: '7' for the case of the variable named 'LST_Day_1km'."
  sets: JSON

  "This is the more formal or scientific name, .e.g., the CF Standard Name."
  standardName: String

  "Raw UMM Metadata of the Variable Record."
  ummMetadata: JSON

  "The units associated with a variable."
  units: String

  "Id of the user who modified/published record"
  userId: String

  "Valid ranges of variable data values."
  validRanges: JSON

  "Specifies the sub type of a variable."
  variableSubType: String

  "Specify basic type of a variable."
  variableType: String

  "All revisions of this Variable."
  revisions: VariableRevisionList

  "Returns the list of collections associated with the variable."
  collections (
    "Collections query parameters"
    params: CollectionsInput

    "The unique concept id assigned to the service."
    conceptId: [String] @deprecated(reason: "Use `params.conceptId`")

    "The number of collections requested by the user."
    limit: Int @deprecated(reason: "Use `params.limit`")

    "Zero based offset of individual results."
    offset: Int @deprecated(reason: "Use `params.offset`")
  ): CollectionList
}

type VariableRevisionList {
  "The number of hits for a given search."
  count: Int

  "The list of variable search results."
  items: [Variable]
}

type VariableList {
  "The number of hits for a given search."
  count: Int

  "Cursor that points to the a specific position in a list of requested records."
  cursor: String

  "The list of variable search results."
  items: [Variable]
}

input VariablesInput {
  "The unique concept id assigned to the variable."
  conceptId: [String]

  "Cursor that points to the/a specific position in a list of requested records."
  cursor: String

  "Keyword search value."
  keyword: String

  "The number of variables requested by the user."
  limit: Int

  "The name of a variable."
  name: String

  "Zero based offset of individual results."
  offset: Int

  "The name of the provider associated with the variable."
  provider: String

  "One or more sort keys can be specified to impact searching. Fields can be prepended with a '-' to sort in descending order. Ascending order is the default but + can be used to explicitly request ascending."
  sortKey: String
}

input VariableInput {
  "The unique concept id assigned to the variable."
  conceptId: String!
}

type Query {
  "Query for a list of Variables."
  variables (
    "Variables query parameters"
    params: VariablesInput

    "The unique concept id assigned to the variable."
    conceptId: [String] @deprecated(reason: "Use `params.conceptId`")

    "Cursor that points to the a specific position in a list of requested records."
    cursor: String @deprecated(reason: "Use `params.cursor`")

    "The number of variables requested by the user."
    limit: Int @deprecated(reason: "Use `params.limit`")

    "The name of a variable."
    name: String @deprecated(reason: "Use `params.name`")

    "Zero based offset of individual results."
    offset: Int @deprecated(reason: "Use `params.offset`")

    "One or more sort keys can be specified to impact searching. Fields can be prepended with a '-' to sort in descending order. Ascending order is the default but + can be used to explicitly request ascending."
    sortKey: [String] @deprecated(reason: "Use `params.sortKey`")
  ): VariableList!

  "Query for a single Variable."
  variable (
    "Variable query parameters"
    params: VariableInput

    "The unique concept id assigned to the variable."
    conceptId: String @deprecated(reason: "Use `params.conceptId`")
  ): Variable
}

type Mutation {
  "Publish generated variables."
  publishGeneratedVariables (
    "The collection concept Id."
    conceptId: String!
  ): VariableList

  "Restore a variable revision."
  restoreVariableRevision (
    "The unique concept id assigned to the variable."
    conceptId: String!

    "The revision of the variable."
    revisionId: String!
  ): VariableMutationResponse

  "Delete a variable."
  deleteVariable (
    "Provider ID of the variable."
    providerId: String!

    "The native id of a varialbe."
    nativeId: String!
  ): VariableMutationResponse
}

type VariableMutationResponse {
  "The unique concept id assigned to the variable."
  conceptId: String!

  "The revision of the variable."
  revisionId: String!
}
