type Group {
  "The unique id assigned to the group."
  id: String!

  "The UID of the application that created the group."
  appUid: String

  "The client ID of the application that created the group."
  clientId: String

  "Name of the group."
  name: String!

  "Description of the group."
  description: String

  "Is the group shared."
  sharedUserGroup: Boolean

  "Who created the group."
  createdBy: String

  "Tag for the group."
  tag: String

  "List of members of the group."
  members: GroupMemberList

  "List of Acls this group belongs to."
  acls (
    "Group acls query parameters."
    params: GroupAclsInput
  ): AclList
}

enum IdentityType {
  system
  provider
  catalog_item
}

input GroupAclsInput {
  "Type of the object being controlled."
  identityType: IdentityType

  "The number of Acls to return."
  limit: Int

  "Zero based offset of individual results."
  offset: Int
}

type GroupList {
  "The number of hits for a given search."
  count: Int

  "The list of group search results."
  items: [Group]
}

input GroupsInput {
  "Parameter used to search for groups by name. Group names are comprised of letters and numbers with no spaces. Any group matching the passed in string will be returned."
  name: String

  "Parameter used to search for groups by user ids. Multiple user ids can be passed as a comma separated string or as an array. A group containing all users passed in will be returned."
  userIds: [String]

  "Parameter used to search for groups by tags. A group that matches any of the tags passed in will be returned. This field supports wildcard searches by setting `wildcardTags` to `true`."
  tags: [String]

  "Setting to `true` will have the `tags` parameter act as a wildcard search, returning groups where the tag contains the provided tag. Setting to `false` will have the `tags` parameter be an exact search. Defaults to `false`."
  wildcardTags: Boolean

  "Parameter used to exclude groups that exactly match the provided tags."
  excludeTags: [String]

  "The number of groups requested by the user."
  limit: Int

  "Zero based offset of individual results."
  offset: Int
}

input GroupInput {
  "The unique id assigned to the group."
  id: String!
}

type Query {
  "Query for Groups."
  groups (
    "User groups query parameters."
    params: GroupsInput
  ): GroupList!

  "Query for a single Group."
  group (
    "User group query parameters."
    params: GroupInput
  ): Group
}

type Mutation {
  "Create a new group."
  createGroup (
    "Required parameter used to set the name of the group. Group names are limited to having letters, numbers, periods, spaces, dashes, and underscores."
    name: String!

    "Optional parameter used set a description of the group. Unless this parameter is supplied, the description will be empty."
    description: String

    "Optional parameter used set a tag for the group. Unless this parameter is supplied, the tag will be empty."
    tag: String

    "Optional parameter used set the shared parameter in the group. Unless this parameter is supplied, the shared_user_group will be false by default."
    sharedUserGroup: String

    "Optional parameter used set the list of members assigned to the group. Values should be a string containing a comma-delimited list of members. Unless this parameter is supplied, the members list will be empty by default."
    members: String
  ): Group!

  "Delete a group."
  deleteGroup (
    "The unique id assigned to the group."
    id: String!
  ): Boolean!

  "Update a group."
  updateGroup (
    "The unique id assigned to the group."
    id: String!

    "The new name of the group."
    name: String

    "The new description of the group."
    description: String

    "The new tag of the group."
    tag: String

    "Update the group members list (optional parameter). Values passed here will replace the current list of members in the group. Values should be a string containing a comma-delimited list of members. An empty or blank value will signify a blank list of members and will erase the current existing list of members in the group."
    members: String
  ): Group!
}
